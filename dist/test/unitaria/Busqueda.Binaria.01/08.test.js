"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Problema_1_1 = require("../../../Busqueda.Binaria.01/08/Problema.1");
const Problema_2_1 = require("../../../Busqueda.Binaria.01/08/Problema.2");
test("Numeros negativos. Test 1", () => {
    let entrada = [
        [4, 3, 2, -1],
        [3, 2, 1, -1],
        [1, 1, -1, -2],
        [-1, -1, -2, -3],
    ];
    let salida = 8;
    let respuesta = (0, Problema_1_1.numeros_negativos)(entrada);
    expect(respuesta).toBe(salida);
});
test("Numeros negativos. Test 2", () => {
    let entrada = [
        [3, 2],
        [1, 0],
    ];
    let salida = 0;
    let respuesta = (0, Problema_1_1.numeros_negativos)(entrada);
    expect(respuesta).toBe(salida);
});
test("Numeros negativos. Test 3", () => {
    let entrada = [
        [5, 1, 0],
        [-5, -5, -5],
    ];
    let salida = 3;
    let respuesta = (0, Problema_1_1.numeros_negativos)(entrada);
    expect(respuesta).toBe(salida);
});
test("Numeros negativos. Test 4", () => {
    let entrada = [
        [3, -1, -3, -3, -3],
        [2, -2, -3, -3, -3],
        [1, -2, -3, -3, -3],
        [0, -3, -3, -3, -3],
    ];
    let salida = 16;
    let respuesta = (0, Problema_1_1.numeros_negativos)(entrada);
    expect(respuesta).toBe(salida);
});
test("Numeros negativos. Test 5", () => {
    let entrada = [
        [-2, -2, -2, -2, -3],
        [-2, -2, -2, -3, -3],
        [-3, -3, -3, -3, -3],
    ];
    let salida = 15;
    let respuesta = (0, Problema_1_1.numeros_negativos)(entrada);
    expect(respuesta).toBe(salida);
});
test("Numeros negativos. Test 6", () => {
    let entrada = [
        [16, 16, 16, 16, 15, 14, 14, 13, 13, 13, 12, -9, -9, -10, -10, -10, -10, -11, -11, -11],
        [15, 14, 14, 14, 14, 13, 13, 12, 11, 10, 9, -9, -10, -11, -12, -13, -14, -14, -14, -14],
        [15, 14, 14, 13, 12, 12, 12, 11, 10, 10, 9, -10, -10, -12, -12, -14, -14, -14, -14, -15],
        [15, 13, 13, 13, 11, 10, 9, 9, 8, 7, 6, -11, -12, -13, -14, -15, -15, -16, -17, -18],
        [14, 13, 12, 12, 11, 9, 8, 7, 7, 6, 5, -11, -12, -13, -15, -16, -16, -17, -17, -19],
        [14, 13, 12, 12, 10, 9, 7, 6, 6, 6, -10, -12, -12, -13, -16, -16, -17, -18, -18, -20],
        [13, 12, 12, 11, 9, 9, 7, 5, 5, 5, -10, -13, -13, -13, -17, -18, -19, -20, -20, -20],
        [13, 12, 11, 11, 8, 7, 7, 4, 3, 2, -10, -14, -15, -16, -18, -18, -20, -20, -20, -20],
        [13, 12, 10, 9, 7, 7, 7, 4, 3, 1, -11, -15, -15, -16, -18, -19, -20, -20, -20, -20],
        [12, 12, 9, 9, 7, 7, 7, 4, 2, 0, -11, -15, -15, -17, -19, -20, -20, -20, -20, -20],
        [12, 11, 8, 7, 7, 6, 6, 3, 2, 0, -11, -15, -15, -18, -20, -20, -20, -20, -20, -20],
        [12, 11, 8, 6, 6, 5, 4, 2, 1, -1, -11, -16, -17, -19, -20, -20, -20, -20, -20, -20],
        [11, 10, 8, 6, 6, 5, 3, 1, 0, -1, -12, -18, -18, -20, -20, -20, -20, -20, -20, -20],
        [11, 10, 7, 5, 4, 4, 2, 0, 0, -1, -13, -18, -19, -20, -20, -20, -20, -20, -20, -20],
        [11, 10, 7, 4, 4, 4, 2, 0, 0, -2, -13, -19, -19, -20, -20, -20, -20, -20, -20, -20],
        [10, 9, 6, 3, 2, 1, 0, 0, 0, -3, -13, -19, -19, -20, -20, -20, -20, -20, -20, -20],
        [9, 9, 5, 2, -5, -6, -7, -7, -8, -9, -14, -19, -19, -20, -20, -20, -20, -20, -20, -20],
        [9, 9, 5, 2, -5, -6, -7, -7, -9, -10, -15, -19, -19, -20, -20, -20, -20, -20, -20, -20],
        [9, 8, 5, 1, -6, -7, -8, -9, -9, -11, -15, -20, -20, -20, -20, -20, -20, -20, -20, -20],
        [8, 8, 5, -2, -13, -14, -14, -15, -15, -16, -17, -20, -20, -20, -20, -20, -20, -20, -20, -20],
        [7, 6, 4, -2, -13, -14, -14, -15, -16, -17, -17, -20, -20, -20, -20, -20, -20, -20, -20, -20],
        [6, 5, 4, -2, -13, -14, -14, -15, -17, -18, -19, -20, -20, -20, -20, -20, -20, -20, -20, -20],
        [5, 5, -7, -8, -14, -14, -15, -16, -17, -19, -19, -20, -20, -20, -20, -20, -20, -20, -20, -20],
        [5, 4, -7, -8, -14, -15, -16, -16, -17, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
        [4, 4, -7, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
        [4, 3, -7, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
        [4, 3, -7, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
        [4, 2, -8, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
        [4, 1, -8, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
        [3, 0, -9, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
        [2, -1, -10, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
        [1, -2, -11, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
        [0, -2, -11, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
        [-1, -3, -12, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
    ];
    let salida = 480;
    let respuesta = (0, Problema_1_1.numeros_negativos)(entrada);
    expect(respuesta).toBe(salida);
});
/* adivinar numero en una matriz */
test("Adivinar numero en una matriz. Test 1", () => {
    let entrada = [
        [1, 3, 5, 7],
        [10, 11, 16, 20],
        [23, 30, 34, 60],
    ];
    let objetivo = 3;
    let respuesta = (0, Problema_2_1.buscar_matriz)(entrada, objetivo);
    let salida = true;
    expect(respuesta).toBe(salida);
});
test("Adivinar numero en una matriz. Test 2", () => {
    let entrada = [
        [1, 3, 5, 7],
        [10, 11, 16, 20],
        [23, 30, 34, 60],
    ];
    let objetivo = 13;
    let respuesta = (0, Problema_2_1.buscar_matriz)(entrada, objetivo);
    let salida = false;
    expect(respuesta).toBe(salida);
});
test("Adivinar numero en una matriz. Test 3", () => {
    let entrada = [[1, 3]];
    let objetivo = 3;
    let respuesta = (0, Problema_2_1.buscar_matriz)(entrada, objetivo);
    let salida = true;
    expect(respuesta).toBe(salida);
});
